{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":"","sourcesContent":["// import * as http from 'http'\n// import { EventEmitter } from 'events'\n// import { GrpcTransport } from './stream'\n// import { AccountInfo } from './account'\n// import {\n//   Server,\n//   ServerCredentials,\n//   Metadata\n// } from 'grpc'\n// import { TransportService, DuplexStream, GrpcAuthCallback } from './grpc'\n// import { default as createLogger, Logger } from 'ilp-logger'\n// const log = createLogger('grpc-transport-server')\n\n// export interface GrpcTransportServerOptions {\n//   secure?: boolean\n// }\n\n// export interface GrpcTransportServerServices {\n//   log?: Logger,\n//   authenticate?: GrpcAuthCallback\n// }\n// export interface GrpcTransportServerListenOptions {\n//   port: number\n// }\n\n// export class GrpcTransportServer extends EventEmitter {\n//   protected _log: Logger\n//   protected _grpc: Server\n//   protected _authenticate: GrpcAuthCallback\n//   constructor (options: GrpcTransportServerOptions, services: GrpcTransportServerServices) {\n//     super()\n//     this._log = services.log || log\n//     this._authenticate = services.authenticate || skipAuthentication\n//   }\n//   public async listen (options: GrpcTransportServerListenOptions): Promise<void> {\n\n//     if (!options.port) {\n//       throw new Error(`Port must be provided`)\n//     }\n//     this._grpc = new Server()\n//     this._grpc.addService(TransportService.service, { MessageStream: this._handleNewStream.bind(this) })\n//     this._grpc.bind(String(options.port), ServerCredentials.createInsecure())\n//     this._grpc.start()\n//     log.info(`gRPC server listening on ${options.port}`)\n//     this.emit('listening')\n//   }\n\n//   _handleNewStream (stream: DuplexStream) {\n\n//     if (!this._authenticate(stream.metadata)) {\n//       this._log.debug(`rejecting incoming connection - failed authentication`)\n//       // TODO - Reject properly\n//       stream.cancel()\n//       return\n//     }\n\n//     const accountId = String(stream.metadata.get('accountId')[0].toString())\n//     const log = createLogger('grpc-server:' + accountId)\n//     const accountInfo = {\n//       relation: stream.metadata.get('accountRelation')[0],\n//       assetCode: stream.metadata.get('accountAssetCode')[0],\n//       assetScale: Number(stream.metadata.get('accountAssetScale')[0])\n//     } as AccountInfo\n\n//     this.emit('connection', new GrpcTransport(stream, { accountId, accountInfo },{ log }))\n//   }\n\n// }\n\n// /**\n//  * Just checks that there is an account id.\n//  * @param requestMetadata The metadat from the gRPC channel\n//  */\n// function skipAuthentication (requestMetadata: Metadata): boolean {\n\n//   if (requestMetadata.get('accountId').length !== 1) {\n//     return false\n//   }\n//   log.warn(`Skipped authentication of incoming connection from account: ${requestMetadata.get('accountId')[0]}`)\n//   return true\n// }\n"]}