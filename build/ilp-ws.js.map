{"version":3,"file":"ilp-ws.js","sourceRoot":"","sources":["../src/ilp-ws.ts"],"names":[],"mappings":";;AACA,+BAAkG;AAGlG,SAAgB,0BAA0B,CAAE,EAAa,EAAE,OAAkC;IAE3F,MAAM,QAAQ,GAAG,IAAI,uBAAiB,CAAC,OAAO,CAAC,CAAA;IAE/C,EAAE,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,IAAoB,EAAE,EAAE;QACxC,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACzB,IAAI;gBACF,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;aACrB;YAAC,OAAO,CAAC,EAAE;gBACV,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,0BAA0B,CAAC,CAAA;aAC3C;SACF;aAAM;YACL,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAA;SAC1C;IACH,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAU,EAAE,EAAE;QACjC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAChB,CAAC,CAAC,CAAA;IAEF,OAAO;QACL,mBAAmB,EAAE,CAAC,OAAmB,EAAE,YAAyB,EAAqB,EAAE;YACzF,OAAO,QAAQ,CAAC,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAA;QAC5D,CAAC;QACD,yBAAyB,EAAE,CAAC,OAAyB,EAAE,EAAE;YACvD,QAAQ,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAA;YAC3C,OAAO,IAAI,CAAA;QACb,CAAC;KACF,CAAA;AACH,CAAC;AA7BD,gEA6BC","sourcesContent":["import * as WebSocket from 'ws'\nimport { IlpStreamEndpoint, IlpEndpoint, IlpRequestHander, IlpStreamEndpointOptions } from './ilp'\nimport { IlpPrepare, IlpReply } from 'ilp-packet'\n\nexport function createIlpWebSocketEndpoint (ws: WebSocket, options?: IlpStreamEndpointOptions): IlpEndpoint {\n\n  const endpoint = new IlpStreamEndpoint(options)\n\n  ws.on('message', (data: WebSocket.Data) => {\n    if (Buffer.isBuffer(data)) {\n      try {\n        endpoint.write(data)\n      } catch (e) {\n        ws.close(1008, 'unable to handle message')\n      }\n    } else {\n      ws.close(1003, 'unexpected message type')\n    }\n  })\n\n  endpoint.on('data', (chunk: any) => {\n    ws.send(chunk)\n  })\n\n  return {\n    sendOutgoingRequest: (request: IlpPrepare, sentCallback?: () => void): Promise<IlpReply> => {\n      return endpoint.sendOutgoingRequest(request, sentCallback)\n    },\n    setIncomingRequestHandler: (handler: IlpRequestHander) => {\n      endpoint.setIncomingRequestHandler(handler)\n      return this\n    }\n  }\n}\n"]}