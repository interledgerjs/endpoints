{"version":3,"file":"message.js","sourceRoot":"","sources":["../src/message.ts"],"names":[],"mappings":";;AAAA,2CAAkD;AAqBlD,SAAgB,YAAY,CAAE,MAAW;IACvC,OAAO,CAAC,OAAO,MAAM,CAAC,EAAE,KAAK,QAAQ,CAAC,IAAI,CAAC,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAA;AACnH,CAAC;AAFD,oCAEC;AASD,SAAgB,gBAAgB,CAAE,OAA4B;IAC5D,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;IACvF,OAAO,MAAM,CAAC,MAAM,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,iBAAa,CAAC,gBAAgB,CAAA;AACrF,CAAC;AAHD,4CAGC;AASD,SAAgB,cAAc,CAAE,OAA4B;IAC1D,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;IACvF,OAAO,MAAM,CAAC,MAAM,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,iBAAa,CAAC,gBAAgB,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,iBAAa,CAAC,eAAe,CAAC,CAAA;AAC3I,CAAC;AAHD,wCAGC;AAOD,SAAgB,mBAAmB,CAAE,OAAmB;IACtD,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;IAC7D,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;IACrC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;IAClC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;IAC/B,OAAO,MAAM,CAAA;AACf,CAAC;AAND,kDAMC;AAOD,SAAgB,qBAAqB,CAAE,IAAY;IACjD,OAAO;QACL,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAC3B,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QACxB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;KACvB,CAAA;AACH,CAAC;AAND,sDAMC","sourcesContent":["import { Type as IlpPacketType } from 'ilp-packet'\n\n/**\n * The message frame for exchanging ILP packets over a byte stream.\n *\n * Each frame has a 64-bit identifier which is used to match a Prepare with a subsequent Fulfill/Reject.\n * The identifier is divided into a 32-bit unsigned integer for the current batch and a 32-bit unsigned integer for the packet id.\n *\n * The payload of the message is an OER encoded ILP packet.\n */\nexport interface IlpMessage {\n  id: number\n  batch: number\n  payload: Buffer\n}\n\n/**\n * Test if an object is a valid IlpMessage\n *\n * @param object object to test\n */\nexport function isIlpMessage (object: any): object is IlpMessage {\n  return (typeof object.id === 'number') && (typeof object.batch === 'number') && (Buffer.isBuffer(object.payload))\n}\n\n/**\n * Test if the message is a request (Prepare).\n *\n * The check is efficient as it doesn't decode the frame or the packet in order to check the type.\n *\n * @param message An IlpMessage, either encoded into a Buffer or as a decoded IlpMessage object.\n */\nexport function isRequestMessage (message: Buffer | IlpMessage): boolean {\n  const [buffer, offset] = Buffer.isBuffer(message) ? [message, 9] : [message.payload, 0]\n  return buffer.length >= offset && buffer[offset] === IlpPacketType.TYPE_ILP_PREPARE\n}\n\n/**\n * Test if the message is a reply (Fulfill or Reject).\n *\n * The check is efficient as it doesn't decode the frame or the packet in order to check the type.\n *\n * @param message An IlpMessage, either encoded into a Buffer or as a decoded IlpMessage object.\n */\nexport function isReplyMessage (message: Buffer | IlpMessage): boolean {\n  const [buffer, offset] = Buffer.isBuffer(message) ? [message, 9] : [message.payload, 0]\n  return buffer.length >= offset && (buffer[offset] === IlpPacketType.TYPE_ILP_FULFILL || buffer[offset] === IlpPacketType.TYPE_ILP_REJECT)\n}\n\n/**\n * Serialize an IlpMessage into a Buffer\n *\n * @param message An IlpMessage object\n */\nexport function serializeIlpMessage (message: IlpMessage): Buffer {\n  const buffer = Buffer.allocUnsafe(8 + message.payload.length)\n  buffer.writeInt32BE(message.batch, 0)\n  buffer.writeInt32BE(message.id, 4)\n  message.payload.copy(buffer, 8)\n  return buffer\n}\n\n/**\n * Deserialize an IlpMessage object from a Buffer\n *\n * @param data the Buffer containing a serialized IlpMessage\n */\nexport function deserializeIlpMessage (data: Buffer): IlpMessage {\n  return {\n    batch: data.readUInt32BE(0),\n    id: data.readUInt32BE(4),\n    payload: data.slice(8)\n  }\n}\n"]}