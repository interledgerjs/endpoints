{"version":3,"file":"packet.js","sourceRoot":"","sources":["../src/packet.ts"],"names":[],"mappings":";;AAAA,2CAAwK;AAaxK,SAAgB,SAAS,CAAE,MAAoB;IAC7C,OAAO,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAA;AAC9B,CAAC;AAFD,8BAEC;AACD,SAAgB,OAAO,CAAE,MAAoB;IAC3C,OAAO,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAA;AAC9B,CAAC;AAFD,0BAEC;AAED,SAAgB,cAAc,CAAC,KAAY;IACzC,MAAM,OAAO,GACX,sBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,gCAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/C,sBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,gCAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;YAC/C,+BAAkB,CAAC,KAAK,CAAC,CAAA;IAC3B,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;IAErD,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;IAChC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;IACnC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;IAEvB,OAAO,MAAM,CAAA;AACf,CAAC;AAZD,wCAYC;AAED,SAAgB,gBAAgB,CAAC,IAAY;IAC3C,MAAM,MAAM,GAAI,iCAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;IACnD,OAAO,MAAM,CAAC,MAAM,CAAC;QACnB,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QACxB,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;KAC5B,EAAE,MAAM,CAAC,IAAI,CAAC,CAAA;AACjB,CAAC;AAND,4CAMC","sourcesContent":["import { IlpPrepare, IlpFulfill, IlpReject, isPrepare, serializeIlpPrepare, isFulfill, serializeIlpFulfill, serializeIlpReject, deserializeIlpPacket } from 'ilp-packet'\n\nexport interface FrameHeaders {\n  id: number\n  batch: number\n}\n\nexport type Frame = RequestFrame | ResponseFrame | ErrorFrame\nexport type RequestFrame = FrameHeaders & IlpPrepare\nexport type ResponseFrame = FrameHeaders & IlpFulfill\nexport type ErrorFrame = FrameHeaders & IlpReject\nexport type ReplyFrame = ResponseFrame | ErrorFrame\n\nexport function isRequest (packet: FrameHeaders): packet is RequestFrame {\n  return (packet.id & 1) === 0\n}\nexport function isReply (packet: FrameHeaders): packet is ReplyFrame {\n  return (packet.id & 1) === 1\n}\n\nexport function serializeFrame(frame: Frame): Buffer {\n  const payload = \n    isPrepare(frame) ? serializeIlpPrepare(frame) :\n    isFulfill(frame) ? serializeIlpFulfill(frame) :\n    serializeIlpReject(frame)\n  const buffer = Buffer.allocUnsafe(8 + payload.length)\n  // TODO Check that id and batch are unsigned 32-bit int\n  buffer.writeInt32BE(frame.id, 0)\n  buffer.writeInt32BE(frame.batch, 4)\n  payload.copy(buffer, 8)\n  // TODO Look at optimizing after ilp-packet has been optimized for zero-copy\n  return buffer\n}\n\nexport function deserializeFrame(data: Buffer): Frame {\n  const packet  = deserializeIlpPacket(data.slice(8))\n  return Object.assign({\n    id: data.readUInt32BE(0),\n    batch: data.readUInt32BE(4),\n  }, packet.data)\n}\n"]}