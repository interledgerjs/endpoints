{"version":3,"file":"asynch_test.js","sourceRoot":"","sources":["../src/asynch_test.ts"],"names":[],"mappings":";;AAAA,mCAA4C;AAE5C,MAAM,SAAS;IAKb,YAAa,MAAc;QAHnB,SAAI,GAAG,IAAI,GAAG,EAAmC,CAAA;QACjD,uBAAkB,GAAG,CAAC,CAAA;QAG5B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAA;QACrB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAU,EAAE,EAAE;YACrC,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;YACxC,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;aACxB;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,0CAA0C,KAAK,CAAC,EAAE,EAAE,CAAC,CAAA;aACtE;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAEM,OAAO,CAAE,OAAe,EAAE,OAAe;QAC9C,MAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAA;QACpC,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC7C,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC5B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;gBACpB,MAAM,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,CAAA;YAChC,CAAC,EAAE,OAAO,CAAC,CAAA;YACX,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,KAAa,EAAE,EAAE;gBAClC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;gBACpB,YAAY,CAAC,KAAK,CAAC,CAAA;gBACnB,OAAO,CAAC,KAAK,CAAC,CAAA;YAChB,CAAC,CAAC,CAAA;YACF,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,CAAA;QACrC,CAAC,CAAC,CAAA;IACJ,CAAC;CACF;AAED,MAAM,YAAa,SAAQ,eAAM;IAE/B;QACE,KAAK,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAC7B,CAAC;IAED,MAAM,CAAE,KAAU,EAAE,QAAgB,EAAE,QAAiC;QACrE,IAAI;YACF,QAAQ,EAAE,CAAA;YAEV,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SACjB;QAAC,OAAO,CAAC,EAAE;YACV,QAAQ,CAAC,CAAC,CAAC,CAAA;SACZ;IACH,CAAC;IAED,KAAK,CAAE,IAAY;IAEnB,CAAC;CAEF;AAED,MAAM,UAAU,GAAG,IAAI,SAAS,CAAC,IAAI,oBAAW,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;AACvE,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,KAAa,EAAE,EAAE;IACvD,OAAO,CAAC,GAAG,CAAC,cAAc,KAAK,EAAE,CAAC,CAAA;AACpC,CAAC,CAAC,CAAA;AAEF,MAAM,UAAU,GAAG,IAAI,SAAS,CAAC,IAAI,YAAY,EAAE,CAAC,CAAA;AACpD,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,KAAa,EAAE,EAAE;IACvD,OAAO,CAAC,GAAG,CAAC,cAAc,KAAK,EAAE,CAAC,CAAA;AACpC,CAAC,CAAC,CAAA","sourcesContent":["import { Duplex, PassThrough } from 'stream'\n\nclass Requestor {\n\n  private _map = new Map<number, (reply: string) => void>()\n  private _nextCorrelationId = 1\n  private _stream: Duplex\n  constructor (stream: Duplex) {\n    this._stream = stream\n    this._stream.on('data', (chunk: any) => {\n      const callback = this._map.get(chunk.id)\n      if (callback) {\n        callback(chunk.message)\n      } else {\n        throw new Error(`unsolicited messaged received with id: ${chunk.id}`)\n      }\n    })\n  }\n\n  public request (message: string, timeout: number): Promise<string> {\n    const id = this._nextCorrelationId++\n    return new Promise<string>((resolve, reject) => {\n      const timer = setTimeout(() => {\n        this._map.delete(id)\n        reject(new Error('timed out'))\n      }, timeout)\n      this._map.set(id, (reply: string) => {\n        this._map.delete(id)\n        clearTimeout(timer)\n        resolve(reply)\n      })\n      this._stream.write({ id, message })\n    })\n  }\n}\n\nclass MirrorStream extends Duplex {\n\n  constructor () {\n    super({ objectMode: true })\n  }\n\n  _write (chunk: any, encoding: string, callback: (error?: Error) => void): void {\n    try {\n      callback()\n      // setTimeout(() => { this.push(chunk) }, 5)\n      this.push(chunk)\n    } catch (e) {\n      callback(e)\n    }\n  }\n\n  _read (size: number): void {\n    // NO OP\n  }\n\n}\n\nconst requestor1 = new Requestor(new PassThrough({ objectMode: true }))\nrequestor1.request('test', 10000).then((reply: string) => {\n  console.log(`Got reply: ${reply}`)\n})\n\nconst requestor2 = new Requestor(new MirrorStream())\nrequestor2.request('test', 10000).then((reply: string) => {\n  console.log(`Got reply: ${reply}`)\n})\n"]}