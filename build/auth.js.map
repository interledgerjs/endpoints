{"version":3,"file":"auth.js","sourceRoot":"","sources":["../src/auth.ts"],"names":[],"mappings":"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","sourcesContent":["import { AccountInfo } from './account'\nimport { IlpEndpoint, RequestHandler } from './endpoint'\nimport { isReject } from 'ilp-packet'\nimport { SError } from 'verror'\nimport { IlpTransport } from './transport'\nimport { IlpSession } from './session'\nimport { createConnection, Socket } from 'net'\n\nexport const ILP_TLS_URL_PROTOCOL = 'ilp+tls:'\nexport const ILP_TCP_URL_PROTOCOL = 'ilp+tcp:'\nexport const ILP_IPC_URL_PROTOCOL = 'ilp+ipc:'\n\nexport interface AuthOptions {\n  authProtocol: string\n  authCondition: Buffer\n  authData: Buffer\n  authTimeout?: Date\n}\n\nexport interface AuthResponse {\n  accountId: string\n  accountInfo: AccountInfo\n  address: string\n}\n\nexport function createBasicAuth (username: string, password: string, expiryMs: number): AuthOptions {\n  return {\n    authProtocol: 'basic',\n    authCondition: Buffer.alloc(32), // TODO - Hash of password?\n    authData: Buffer.from(`${username}:${password}`, 'utf8'),\n    authTimeout: new Date(Date.now() + expiryMs)\n  }\n}\n\nexport function deserializeAuth (data: Buffer): AuthResponse {\n  return {\n    accountId: 'test',\n    accountInfo: {\n      assetCode: 'USD',\n      assetScale: 2,\n      relation: 'peer'\n    },\n    address: 'test.123.test'\n  }\n}\n\nexport type IlpSessionAuthenticator = (endpoint: IlpEndpoint) => Promise<IlpSession>\n\nexport async function authenticate (endpoint: IlpEndpoint, options: AuthOptions): Promise<IlpSession> {\n\n  // Authenticate\n  const rsp = await endpoint.request({\n    destination: 'peer.auth.' + options.authProtocol,\n    amount: '0',\n    executionCondition: options.authCondition,\n    expiresAt: options.authTimeout || new Date(Date.now() + 30 * 1000),\n    data: options.authData // TODO - Define an auth protocol\n  })\n\n  if (isReject(rsp)) {\n    throw new SError('auth rejected: %s', rsp)\n  }\n  const { accountInfo, address } = deserializeAuth(rsp.data)\n  const { assetCode, assetScale } = accountInfo\n  return {\n    address,\n    assetCode,\n    assetScale\n  }\n\n}\n\nexport async function createSession (url: URL, requestHandler: RequestHandler): Promise<IlpTransport> {\n\n  const accountId = url.username\n  const accountPassword = url.password\n\n  return new Promise<IlpTransport>((resolve, reject) => {\n\n    async function handleConnect (socket: Socket) {\n      const ilpStream = new IlpTransport(socket)\n      ilpStream.handlers.set('*', requestHandler)\n      await authenticate(ilpStream, createBasicAuth(accountId, accountPassword, 30 * 1000))\n      return ilpStream\n    }\n\n    if (url.protocol === ILP_TCP_URL_PROTOCOL) {\n      const tcpSocket = createConnection(Number(url.port), url.hostname, () => {\n        return handleConnect(tcpSocket)\n      })\n    } else if (url.protocol === ILP_IPC_URL_PROTOCOL) {\n      const ipcSocket = createConnection(url.pathname, () => {\n        return handleConnect(ipcSocket)\n      })\n    } else if (url.protocol === ILP_TLS_URL_PROTOCOL) {\n      throw new Error(`TLS has not been implemented yet.`)\n    } else {\n      throw new Error(`Unknown protocol: ${url.protocol}`)\n    }\n  })\n}\n"]}