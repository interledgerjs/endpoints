{"version":3,"file":"endpoint.js","sourceRoot":"","sources":["../src/endpoint.ts"],"names":[],"mappings":"","sourcesContent":["import { RequestHandler } from './request-stream'\n\n/**\n * A standardized interface for sending and receiving requests.\n *\n * The interface inherits a lot from `net.Socket` for its life-cycle management.\n *\n * Before calling `sendOutgoingRequest` an endpoint should be connected by calling `connect()`.\n * Connecting is an asynchronous operation. The 'connect' event indicates that it has completed.\n */\nexport interface Endpoint<Request, Reply> {\n\n  /**\n   * Send a Request and wait for the Reply.\n   *\n   * @param request request payload to send\n   * @param sentCallback Callback invoked by the underlying transport when the message has been sent\n   */\n  sendOutgoingRequest: (request: Request, sentCallback?: () => void) => Promise<Reply>\n\n  /**\n   * Set a handler(s) for incoming requests.\n   */\n  setIncomingRequestHandler: (handler: RequestHandler<Request, Reply>) => this\n\n}\n"]}