{"version":3,"file":"request.js","sourceRoot":"","sources":["../src/request.ts"],"names":[],"mappings":";;AAKA,MAAa,OAAO;IAKlB,YAAa,KAAmB,EAAE,gBAAgD,EAAE,eAA2B;QAC7G,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;QACrB,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAA;QAEzC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,eAAe,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC,eAAe,EAAE,CAAA;QACxF,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE;YAC5B,eAAe,EAAE,CAAA;QACnB,CAAC,EAAE,OAAO,CAAC,CAAA;IACb,CAAC;IAEM,gBAAgB,CAAE,QAAoB;QAC3C,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACzB,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAA;IAClC,CAAC;CAEF;AApBD,0BAoBC","sourcesContent":["import { RequestFrame, ReplyFrame } from './packet'\n\n/**\n * Represents a sent message. Emits events if a reply is received or the request times out\n */\nexport class Request {\n  private _timer: NodeJS.Timer\n  private _request: RequestFrame\n  private _responseCallback: (response: ReplyFrame) => void\n\n  constructor (frame: RequestFrame, responseCallback: (response: ReplyFrame) => void, timeoutCallback: () => void) {\n    this._request = frame\n    this._responseCallback = responseCallback\n\n    const timeout = this._request.expiresAt.getMilliseconds() - new Date().getMilliseconds()\n    this._timer = setTimeout(() => {\n      timeoutCallback()\n    }, timeout)  \n  }\n\n  public responseReceived (response: ReplyFrame): void {\n    clearTimeout(this._timer)\n    this._responseCallback(response)\n  }\n\n}\n"]}