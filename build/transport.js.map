{"version":3,"file":"transport.js","sourceRoot":"","sources":["../src/transport.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events'\nimport { IlpPrepare, IlpReply, serializeIlpPrepare, deserializeIlpReply, deserializeIlpPrepare, serializeIlpReply, serializeIlpReject, Errors as IlpErrors } from 'ilp-packet'\nimport { SError } from 'verror'\nimport { isRequestMessage, IlpMessage } from './message'\nimport { IlpEndpoint, RequestHandlerProvider } from './endpoint'\nimport { Duplex } from 'stream'\n\nexport const DEFAULT_BATCH = 1\nexport const DEFAULT_BATCH_CUTOVER_TIMEOUT_MS = 30 * 1000\nexport const DEFAULT_MAX_TIMEOUT_MS = 5 * 60 * 1000\n\n/**\n * Constructor options for a new `IlpTransport` object.\n */\ninterface IlpTransportOptions {\n\n  /**\n   * The initial provider to use to provide a handler for incoming requests.\n   */\n  handlerProvider?: RequestHandlerProvider\n  /**\n   * The initial batch number to use\n   */\n  batch?: number\n  /**\n   * The time allowed after the batch changes when requests with the old batch will still be allowed.\n   */\n  batchCutoverTimeoutMs?: number\n  /**\n   * Max timeout allowed in ILP Prepare packets passed via `request`.\n   */\n  maxTimeoutMs?: number\n}\n\n/**\n * Reference implementation of an IlpEndpoint supporting any `stream.Duplex` implementation that reads and writes `IlpMessage` objects.\n *\n * The supplied `stream.Duplex` must be in Object Mode and must read and write objects that implement the following interface:\n * ```\n * {\n *   batch: number (uint32)\n *   id: number (unint32)\n *   payload: Buffer (ILP packet)\n * }\n * ```\n *\n * This implementation uses the ILP Transport protocol as the message protocol over the supplied message stream therefor each request/reply has a unique batch and id.\n */\nexport class IlpTransport extends EventEmitter implements IlpEndpoint {\n  protected _stream: Duplex\n  protected _requestIdsByBatch: Map<number, number>\n  protected _outgoing: Map<number, { respond: (response: Buffer) => void, timeout: NodeJS.Timeout }>\n  protected _incoming: Set<number>\n  protected _batch: number\n  protected _newBatch: number\n  protected _minimumBatch: number\n  protected _batchCutoverTimeoutMs: number\n  protected _maxTimeoutMs: number\n\n  /**\n   * Create a new IlpTransport using the provided stream as the underlying message stream.\n   *\n   * @param stream a stream.Duplex that reads/writes `IlpMessage` objects\n   * @param options constructor options\n   */\n  constructor (stream: Duplex, options?: IlpTransportOptions) {\n    super()\n    this._incoming = new Set()\n    this._outgoing = new Map()\n    this._requestIdsByBatch = new Map()\n\n    this._batch = (options && options.batch)\n      ? options.batch\n      : DEFAULT_BATCH\n    this._newBatch = this._batch\n    this._minimumBatch = this._batch\n\n    this._batchCutoverTimeoutMs = (options && options.batchCutoverTimeoutMs)\n      ? options.batchCutoverTimeoutMs\n      : DEFAULT_BATCH_CUTOVER_TIMEOUT_MS\n\n    this._maxTimeoutMs = (options && options.maxTimeoutMs)\n      ? options.maxTimeoutMs\n      : DEFAULT_MAX_TIMEOUT_MS\n\n    this._stream = stream\n\n    this._stream.on('error', (error: any) => {\n      this.emit('error', new SError(error, 'error in underlying stream.'))\n    })\n    this._stream.on('data', (message: IlpMessage) => {\n      this._handleMessage(message)\n    })\n\n    if (options && options.handlerProvider) {\n      this.handlerProvider = options.handlerProvider\n    } else {\n      this.handlerProvider = (packet: IlpPrepare) => {\n        return (packet: IlpPrepare): Promise<IlpReply> => {\n          const err = new SError('no request handler for incoming request', packet)\n          this.emit('error', err)\n          return Promise.resolve({\n            triggeredBy: (this.address) ? this.address : 'peer',\n            code: IlpErrors.codes.T00_INTERNAL_ERROR,\n            message: '',\n            data: Buffer.allocUnsafe(0)\n          })\n        }\n      }\n    }\n  }\n\n  /**\n   * Function returning a `RequestHandler` given an incoming ILP Prepare.\n   *\n   * The default provider maintains a Map of handlers indexed by address prefixes. It finds the\n   * handler that has the longest prefix that matches the `destination` of the incoming packet.\n   */\n  public handlerProvider: RequestHandlerProvider\n\n  /**\n   * The ILP address of this endpoint. Used in ILP Reject messages generated by the transport.\n   */\n  public address?: string\n\n  /**\n   * Get the current batch\n   */\n  public get batch (): number {\n    return this._batch\n  }\n\n  /**\n   * Set a new batch. (Cut-over the batch)\n   */\n  public newBatch (batch: number) {\n    if (batch < this._batch) {\n      throw new SError(`can't reduce batch number from current value of ${this._batch}`)\n    }\n    if (this._newBatch !== this._batch) {\n      throw new SError(`a batch cut-over is currently pending to batch ${this._newBatch} ` +\n                        `and will only cut over when a new request is sent.`)\n    }\n    this._newBatch = batch\n  }\n\n  public request (request: IlpPrepare, sentCallback?: (error?: Error) => void): Promise<IlpReply> {\n    if (!this._stream.writable) throw new Error('underlying stream is not writeable')\n    const packet = serializeIlpPrepare(request)\n    const message = this._nextMessage(packet)\n    const key = _requestKey(message)\n\n    const timeoutMs = request.expiresAt.valueOf() - Date.now()\n    if (timeoutMs > this._maxTimeoutMs || timeoutMs <= 0) {\n      throw new SError('invalid expiresAt in ILP packet. timeoutMs=%s, maxTimeoutMs=%s', timeoutMs, this._maxTimeoutMs)\n    }\n    return new Promise<IlpReply>((replyCallback, errorCallback) => {\n      const timeout = setTimeout(() => {\n        this._outgoing.delete(key)\n        errorCallback(new SError('timed out waiting for response'))\n      }, timeoutMs)\n\n      const respond = (response: Buffer) => {\n        clearTimeout(timeout)\n        this._outgoing.delete(key)\n        replyCallback(deserializeIlpReply(response))\n      }\n      this._outgoing.set(key, { respond, timeout })\n      this._stream.write(message, sentCallback)\n    })\n  }\n\n  private _nextMessage (payload: Buffer): IlpMessage {\n\n    // Pending cut-over?\n    if (this._batch !== this._newBatch) {\n      this._batch = this._newBatch\n      setTimeout(() => {\n        this._minimumBatch = this._batch\n      }, this._batchCutoverTimeoutMs)\n    }\n\n    const batch = this._batch\n    const lastId = this._requestIdsByBatch.get(batch)\n    const id = (typeof lastId !== 'number') ? 1 : lastId + 1\n    this._requestIdsByBatch.set(batch, id)\n    return { batch, id, payload }\n  }\n\n  private _handleMessage (message: IlpMessage): void {\n    const { batch, id, payload } = message\n    try {\n      const key = _requestKey(message)\n      if (isRequestMessage(message)) {\n        if (this._incoming.has(key)) {\n          this.emit('error', new SError(`duplicate request received for key: ${key}`))\n          return\n        }\n\n        if (batch < this._minimumBatch) {\n          this.emit('error', new SError(`request received for closed batch : ${batch}`))\n          return\n        }\n\n        // Other endpoint is requesting a cut-over\n        if (batch > this._batch) {\n          if (this._batch === this._newBatch || batch >= this._newBatch) {\n            this._newBatch = batch\n          }\n          this._batch = batch\n        }\n\n        const packet = deserializeIlpPrepare(payload)\n        const handler = this.handlerProvider(packet)\n        this._incoming.add(key)\n        const timeout = setTimeout(() => {\n          this._incoming.delete(key)\n          this.emit('error', new SError('timed out waiting for response from request handler. batch=%s id=%s', batch, id))\n        }, packet.expiresAt.getMilliseconds() - new Date().getMilliseconds())\n\n        handler(packet)\n        .then(reply => {\n          clearTimeout(timeout)\n          this._incoming.delete(key)\n          this._stream.write({\n            id,\n            batch,\n            payload: serializeIlpReply(reply)\n          }, (error?: Error) => {\n            if (error) {\n              this.emit('error', new SError(error, 'error sending fulfill. batch=%s id=%s', batch, id))\n            }\n          })\n        })\n        .catch(e => {\n          this._incoming.delete(key)\n          // Error thrown by request handler\n          const err = new SError(e, 'error handling incoming request. batch=%s id=%s', batch, id)\n          this.emit('error', err)\n          this._stream.write({\n            id,\n            batch,\n            payload: serializeIlpReject({\n              triggeredBy: (this.address) ? this.address : 'peer',\n              code: IlpErrors.codes.T00_INTERNAL_ERROR,\n              message: '',\n              data: Buffer.allocUnsafe(0)\n            })\n          }, (error?: Error) => {\n            if (error) {\n              this.emit('error', new SError(error, 'error sending reject. batch=%s id=%s', batch, id))\n            }\n          })\n        })\n      } else {\n        const request = this._outgoing.get(key)\n        if (!request) {\n          this.emit('error', new SError('unsolicited response message received: %s', message))\n        } else {\n          request.respond(payload)\n        }\n      }\n    } catch (e) {\n      this.emit('error', new SError(e, 'error handling message. batch=%s id=%s', batch, id))\n    }\n  }\n}\n\nfunction _requestKey (message: IlpMessage): number {\n  const arr = new ArrayBuffer(8)\n  const view = new DataView(arr)\n  view.setUint32(0, message.batch, false)\n  view.setUint32(4, message.id, false)\n  return view.getFloat64(0)\n}\n"]}