{"version":3,"file":"provider.js","sourceRoot":"","sources":["../src/provider.ts"],"names":[],"mappings":";;AAOA,MAAa,4BAA4B;IAOvC,YAAa,QAAsC;QACjD,IAAI,QAAQ,EAAE;YACZ,KAAK,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,QAAQ,EAAE;gBACzC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;aACpC;SACF;IACH,CAAC;IAUD,IAAW,cAAc;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IAC/B,CAAC;IAED,IAAW,cAAc,CAAE,OAAmC;QAC5D,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;SAChC;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;SAC1B;IACH,CAAC;IAWM,cAAc,CAAE,OAAmB;QACxC,IAAI,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAC1C,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;YACtD,IAAI,OAAO;gBAAE,OAAO,OAAO,CAAA;SAC5B;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IAC/B,CAAC;CACF;AAnDD,oEAmDC","sourcesContent":["import { RequestHandler } from './endpoint'\nimport { IlpPrepare, IlpReply, Errors as IlpError } from 'ilp-packet'\nimport { SError } from 'verror'\n\n/**\n * A map of handlers than can be used as the RequestHandlerProvider for an `IlpEndpoint` keyed by ILP Address\n */\nexport class AddressMappedHandlerProvider {\n\n  /**\n   * Constructor\n   *\n   * @param handlers A Map of handlers to pre-load the object with.\n   */\n  constructor (handlers?: Map<string, RequestHandler>) {\n    if (handlers) {\n      for (const [address, handler] of handlers) {\n        this.handlers.set(address, handler)\n      }\n    }\n  }\n\n  /**\n   * The Map of handlers consulted when `provideHandler` is called.\n   */\n  public handlers: Map<string, RequestHandler>\n\n  /**\n   * The default handler provided when no match is found in the Map for the address of the request.\n   */\n  public get defaultHandler (): RequestHandler | undefined {\n    return this.handlers.get('*')\n  }\n\n  public set defaultHandler (handler: RequestHandler | undefined) {\n    if (handler) {\n      this.handlers.set('*', handler)\n    } else {\n      this.handlers.delete('*')\n    }\n  }\n\n  /**\n   * Provide the handler to use for the supplied packet.\n   *\n   * This implementation will return a handler from the backing Map using the address\n   * of the request as the key or the default handler if no match is found.\n   *\n   * @param request The incoming ILP packet that must be handled\n   * @param meta Any meta-data from the incoming request (transport specific)\n   */\n  public provideHandler (request: IlpPrepare) {\n    if (request.destination.startsWith('peer')) {\n      const handler = this.handlers.get(request.destination)\n      if (handler) return handler\n    }\n    return this.handlers.get('*')\n  }\n}\n"]}