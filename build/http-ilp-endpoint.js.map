{"version":3,"file":"http-ilp-endpoint.js","sourceRoot":"","sources":["../src/http-ilp-endpoint.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events'\nimport * as http from 'http2'\nimport * as url from 'url'\nimport { IlpPrepare, IlpReply, Errors as IlpErrors, IlpReject, isFulfill } from 'ilp-packet'\nimport { Endpoint } from './endpoint'\nimport { IlpRequestHander as IlpRequestHandler } from './ilp'\n\nexport const DEFAULT_MAX_TIMEOUT_MS = 5 * 60 * 1000\n\n/**\n * Constructor options for a new `IlpTransport` object.\n */\ninterface HttpIlpEndpointOptions {\n  peerUrl: string | url.URL,\n  clientOptions?: http.ClientSessionOptions | http.SecureClientSessionOptions,\n  serverOptions: http.SecureServerOptions & { secure: boolean }\n  /**\n   * The initial provider to use to provide a handler for incoming requests.\n   */\n  handler?: IlpRequestHandler\n  /**\n   * Max timeout allowed in ILP Prepare packets passed via `request`.\n   */\n  maxTimeoutMs?: number\n}\n\n/**\n * Reference implementation of an Endpoint using HTTP ILP as the underlying bilateral transport.\n */\nexport class HttpIlpEndpoint extends EventEmitter implements Endpoint<IlpPrepare, IlpReply> {\n  protected _server: http.Http2Server\n  protected _client: http.ClientHttp2Session\n  protected _maxTimeoutMs: number\n  protected _handler: IlpRequestHandler\n\n  /**\n   * Create a new HttpEndpoint.\n   *\n   * @param options constructor options\n   */\n  constructor (options: HttpIlpEndpointOptions) {\n    super()\n\n    this._maxTimeoutMs = (options && options.maxTimeoutMs)\n      ? options.maxTimeoutMs\n      : DEFAULT_MAX_TIMEOUT_MS\n\n    const createServer = options.serverOptions.secure ? http.createSecureServer : http.createServer\n    this._server = createServer(options.serverOptions, async (request: http.Http2ServerRequest, response: http.Http2ServerResponse) => {\n      return this._handleRequest(request, response)\n    })\n    this._server.on('sessionError', (error: Error) => {\n      this.emit('error', error)\n    })\n\n    this._client = http.connect(options.peerUrl, options.clientOptions)\n\n    if (options && options.handler) {\n      this._handler = options.handler\n    } else {\n      this._handler = (packet: IlpPrepare): Promise<IlpReply> => {\n        throw new Error('no handler provided for incoming requests')\n      }\n    }\n  }\n\n  /**\n   * The ILP address of this endpoint. Used in ILP Reject messages generated by the transport.\n   */\n  public address?: string\n\n  public sendOutgoingRequest (request: IlpPrepare, sentCallback?: (() => void) | undefined): Promise<IlpReply> {\n    if (!this._client) throw new Error('underlying stream is not writeable')\n\n    const timeoutMs = request.expiresAt.valueOf() - Date.now()\n    if (timeoutMs > this._maxTimeoutMs || timeoutMs <= 0) {\n      throw new Error(`invalid expiresAt in ILP packet. timeoutMs=${timeoutMs}, maxTimeoutMs=${this._maxTimeoutMs}`)\n    }\n\n    return (async () => {\n      const timeout = setTimeout(() => {\n        // TODO: - What to do with the request here?\n        throw new Error('timed out waiting for response')\n      }, timeoutMs)\n      try {\n        return await writeIlpHttpRequest(this._client, request, sentCallback)\n      } finally {\n        clearTimeout(timeout)\n      }\n    })()\n  }\n\n  public setIncomingRequestHandler (handler: IlpRequestHandler): this {\n    this._handler = handler\n    return this\n  }\n\n  private async _handleRequest (request: http.Http2ServerRequest, response: http.Http2ServerResponse): Promise<void> {\n    const prepare = await readIlpHttpRequest(request)\n    const timeout = setTimeout(() => {\n      throw new Error('timed out waiting for response from request handler. packet=' + JSON.stringify(prepare))\n    }, prepare.expiresAt.valueOf() - Date.now())\n    try {\n      writeIlpHttpResponse(response, await this._handler(prepare))\n    } finally {\n      clearTimeout(timeout)\n    }\n  }\n}\n\nexport async function writeIlpHttpRequest (client: http.ClientHttp2Session, request: IlpPrepare, sentCallback?: (error?: Error) => void): Promise<IlpReply> {\n  return new Promise<IlpReply>((resolve, reject) => {\n    const stream = client.request({\n      'content-type': '',\n      'ilp-destination': request.destination,\n      'ilp-expires-at': request.expiresAt.toISOString(), // TODO: What format to use here?\n      'ilp-condition': request.executionCondition.toString('base64')\n    })\n    stream.on('error', (error: Error) => {\n      reject(error)\n    })\n    stream.on('response', (headers: http.IncomingHttpHeaders & http.IncomingHttpStatusHeader, flags: number) => {\n      stream.on('data', (data: Buffer) => {\n        stream.end()\n        if (headers['content-type'] === 'application/ilp-fulfill') { //TODO: Use correct content-types\n          resolve({\n            fulfillment: Buffer.from(headers['ilp-fulfillment'] as string, 'base64'),\n            data\n          })\n        } else {\n          resolve({\n            code: headers['ilp-reject-code'] as string,\n            message: headers['ilp-reject-message'] as string,\n            triggeredBy: headers['ilp-reject-triggered-by'] as string,\n            data\n          })\n        }\n      })\n    })\n    stream.write(request.data, sentCallback)\n  })\n}\n\nexport async function readIlpHttpRequest (request: http.Http2ServerRequest): Promise<IlpPrepare> {\n  // TODO: Based on content type, parse out the prepare packet\n  return {\n    amount: '',\n    destination: '',\n    executionCondition: Buffer.alloc(0),\n    expiresAt: new Date(),\n    data: Buffer.alloc(0)\n  }\n}\n\nexport function writeIlpHttpResponse (response: http.Http2ServerResponse, reply: IlpReply, sentCallback?: (error?: Error) => void): void {\n  if (isFulfill(reply)) {\n    response.setHeader('content-type', '')\n    response.setHeader('ilp-fulfillment', reply.fulfillment.toString('base64'))\n  } else {\n    response.setHeader('content-type', '')\n    response.setHeader('ilp-reject-code', reply.code)\n    response.setHeader('ilp-reject-message', reply.message)\n    response.setHeader('ilp-reject-triggered-by', reply.triggeredBy)\n  }\n  response.write(reply.data, sentCallback)\n}\n"]}